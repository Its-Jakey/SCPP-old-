#include <graphics>
#include <time>
#include <input>
#include <math>
#include <strings>

#define topBarHeight 20
#define resizeBoxSize 10

namespace windowTest {
    var windowX = 0;
    var windowY = 0;
    var pmouseX = 0;
    var pmouseY = 0;
    var px = 0;
    var py = 0;
    var pw = 0;
    var ph = 0;
    var dragging = 0;
    var resizing = 0;
    var windowWidth = 200;
    var windowHeight = 130;

    func drawWindow() {
        graphics::clear();

        //draw top bar
        graphics::setColor(16640149);
        graphics::fillRect(windowX, windowY, windowWidth, topBarHeight);

        //draw body
        graphics::setColor(16777215);
        graphics::fillRect(windowX, windowY + topBarHeight, windowWidth, windowHeight - topBarHeight);
        graphics::flip();

    }

    func moveWindow() {
        if (input::isMouseDown()) {
            if ((math::inRange(input::mouseX(), windowX, windowX + windowWidth) && math::inRange(input::mouseY(), windowY, windowY + topBarHeight)) || dragging) {
                dragging = 1;
                windowX = px - (pmouseX - input::mouseX());
                windowY = py - (pmouseY - input::mouseY());
                return;
            }
            if ((math::inRange(input::mouseX(), windowX + windowWidth - resizeBoxSize, windowX + windowWidth + 1) && math::inRange(input::mouseY(), windowY + windowHeight - resizeBoxSize, windowY + windowHeight - 1)) || resizing) {
                resizing = 1;
                windowWidth = pw - (pmouseX - input::mouseX());
                windowHeight = ph - (pmouseY - input::mouseY());
            }
            return;
        }
        pmouseX = input::mouseX();
        pmouseY = input::mouseY();
        px = windowX;
        py = windowY;
        pw = windowWidth;
        ph = windowHeight;
        draging = 0;
        resizing = 0;
    }

    public func main(){

        while (1) {
            var startTime = time::getRuntimeMillis();

            moveWindow();
            drawWindow();

            var endTime = time::getRuntimeMillis();
        }
    }
}
